// coding=utf-8

// Copyright [2024] [SkywardAI]
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//        http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { calculateEmbedding } from "../actions/embedding.js";
import { get } from "../tools/request.js";
import { getTable } from "./index.js";
import { DATASET_TABLE, SYSTEM_TABLE } from "./types.js";

async function loadDatasetFromURL(dataset_name, dataset_url, system_table) {
    system_table = system_table || await getTable(SYSTEM_TABLE);
    const { rows, http_error } = await get('', {}, {URL: dataset_url});
    if(http_error) return false;
    
    await system_table.add([{ title: "loaded_dataset_name", value: dataset_name }]);

    await (await getTable(DATASET_TABLE)).add(rows.map(({row})=>{
        const { identifier, context, embedding } = row;
        return { identifier, context, vector: embedding, dataset_name }
    }))
    return true;
}

/**
 * Load a dataset from given url.  
 * * This will first check whether the dataset is loaded in database, if `force` not provided and it's loaded already, it won't load again.
 * * The dataset format should be an array of object contains at least `identifier`, `context` and `identifier_embedding` properties
 * @param {String} dataset_name The dataset name to load
 * @param {String} dataset_url The url of dataset to load
 * @param {Boolean} force Specify whether to force load the dataset, default `false`.
 * @returns {Promise<Boolean>} If cannot get the dataset, return `false`, otherwise return `true`
 */
export async function loadDataset(dataset_name, dataset_url, force = false) {
    const system_table = await getTable(SYSTEM_TABLE)
    if(!force) {
        const loaded_dataset = await system_table.query()
        .where(`title="loaded_dataset_name" AND value="${dataset_name}"`).toArray();
        // check if the given dataset loaded, if not, load the dataset
        return !!(loaded_dataset.length || await loadDatasetFromURL(dataset_name, dataset_url, system_table))
    } else {
        return await loadDatasetFromURL(dataset_name, dataset_url, system_table)
    }
}

/**
 * @typedef EmbeddingSearchResult
 * @property {String} identifier The identifier from dataset
 * @property {String} context The context from dataset
 * @property {Number} _distance The distance of this result, generated by database algorithm
 */

/**
 * Search in given dataset using provided embedding value to get Q/A pair
 * @param {String} dataset_name The dataset name to be query from
 * @param {Array<Float>} vector The embedding result to be searched
 * @param {Number} max_distance If the calculated distance is over given max_distance, then the result will be excluded.  
 * Default to `0.8`.
 * @param {Integer} max_results Maximum `max_results` results will be returned.\
 * If set to `1`, This function will return an instance of {@link EmbeddingSearchResult},\
 * Otherwise will return an array of {@link EmbeddingSearchResult}
 * @returns {Promise<EmbeddingSearchResult|EmbeddingSearchResult[]|null>} If there's no result, returns null, otherwise returns the result
 */
export async function searchByEmbedding(dataset_name, vector, max_distance = 0.8, max_results = 1) {
    const embedding_result = (await (
        await getTable(DATASET_TABLE)
    ).search(vector).distanceType("cosine").where(`dataset_name = "${dataset_name}"`)
    .limit(max_results).toArray());

    if(embedding_result) {
        if(max_results === 1) {
            const { identifier, context, _distance } = embedding_result.pop();
            if(_distance >= max_distance) return null;
            return { identifier, context, _distance }
        } else {
            const results = [];
            for(const result of embedding_result) {
                const { identifier, context, _distance } = result;
                if(_distance >= max_distance) break;
                results.push({ identifier, context, _distance })
            }
            return results;
        }
    }
    return null;
}

/**
 * Search in given dataset using provided message to get Q/A pair.  
 * This will firstly embedding the message and query use {@link searchByEmbedding}
 * @param {String} dataset_name The dataset name to be query from
 * @param {String} message The message to be searched
 * @param {Number} max_distance If the calculated distance is over given max_distance, then the result will be excluded.  
 * Default to `1`.
 * @param {Integer} max_results Maximum `max_results` results will be returned.\
 * If set to `1`, This function will return an instance of {@link EmbeddingSearchResult},\
 * Otherwise will return an array of {@link EmbeddingSearchResult}
 * @returns {Promise<EmbeddingSearchResult|EmbeddingSearchResult[]|null>} If there's no result, returns null, otherwise returns the result
 */
export async function searchByMessage(dataset_name, message, max_distance = 0.8, max_results = 1) {
    const embedding = calculateEmbedding(message);

    if(embedding) return await searchByEmbedding(dataset_name, embedding, max_distance, max_results);
    return null;
}